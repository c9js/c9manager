#▄────────────────────────▄1.0.0
#█                        █
#█  Core: Input           █
#█  • Ввод данных (ядро)  █
#█                        █
#▀────────────────────────▀
core:Input() { case "$1" in
#┌────────────────────────────────────────────────────────────────────────┐
#│ Предлагает пользователю ввести данные вручную                          │
#├────────────────────────────────────────────────────────────────────────┤
#│ Пример вызова:                                                         │
#│ input <значение по умолчанию> <функция проверки> <сообщение об ошибке> │
#│ input 'build' 'isValidCommand' "Команда '%s' не найдена!"              │
#└────────────────────────────────────────────────────────────────────────┘
    'input')
    # Локальные переменные
        local res
        
    # Выделяем строку ввода
        printf '\e[44m' # Синий фон
        printf '\e[K' # Удаление всех символов до конца строки
        
    # Предлагаем пользователю ввести данные вручную
        read -e -r -p '$ ' -i "$2"
        
    # Если данные введены не верно
        if ! res=$($3 "$REPLY" 2>&1); then
            printf '\e[0m' # Сброс цвета
            printf '\r' # Возврат в начало строки
            printf '\e[A' # Переход на одну строку вверх
            printf '\e[K' # Удаление всех символов до конца строки
            
        # Выводим сообщение об ошибке
            printf 'Ошибка! '
            [ -z "$4" ] && printf "$res" "$REPLY" || printf "$4" "$REPLY"
            printf '\n'
            
        # Предлагаем пользователю ввести данные еще раз
            input "$REPLY" "$3" "$4"
        fi
    ;;
esac
}
