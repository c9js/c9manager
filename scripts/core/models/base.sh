#▄────────────────────────────▄1.0.1
#█                            █
#█  Core: Base                █
#█  • Базовые функции (ядро)  █
#█                            █
#▀────────────────────────────▀
core:Base() { case "$1" in
#┌───────────────────────────────┐
#│ Инструмент для отладки кода   │
#├───────────────────────────────┤
#│ 1. Очищает экран              │
#│ 2. Выводит список сообщений   │
#│ 3. Завершает процесс          │
#├───────────────────────────────┤
#│ Пример: trace "$str1" "$str2" │
#└───────────────────────────────┘
    'trace')
    # Очищаем экран
        reset
        
    # Выводим сообщение на экран
        printf '%s\n' "${@:2}"
        
    # Завершаем процесс
        exit
    ;;
    
#┌──────────────────────────┐
#│ Переводит строку в число │
#└──────────────────────────┘
    'number')
        printf '%d' "$2" 2> '/dev/null'
    ;;
    
#┌────────────────────────────────────────┐
#│ Выводит графическое состояние загрузки │
#└────────────────────────────────────────┘
    'progressBar')
    # Список аргументов
        local size="$2"    # Общий размер
        local procent="$3" # Сколько уже заполнено в процентах
        
    # Вычисляем сколько уже заполнено
        local fill="$(printf 'scale=3; %d/100*%d' "$procent" "$size" 2> '/dev/null' | bc)"
        
    # Округляем до целого
        local half="$(echo "$fill" | awk '{printf "%.0f",$0}')"
        
    # Округляем в меньшую сторону
        fill="$(printf '%d' "$fill" 2> '/dev/null')"
        
    # Вычисляем половину деления
        (( $half > $fill )) && half='▌' || half=' '
        
    # Вычисляем сколько осталось
        local left="$(($size-$fill-1))"
        
    # Вычисляем сколько уже заполнено
        fill="$(printf "%${fill}s")"
        
    # Добавляем цвет фона
        printf '\e[100m'
        
    # Выводим сколько уже заполнено
        printf "${fill//[[:space:]]/█}"
        
    # Выводим половину деления
        (( $procent != 100 )) && printf "$half"
        
    # Выводим сколько осталось
        (( $procent != 100 )) && printf "%${left}s"
        
    # Сбрасываем цвет
        printf '\e[0m'
        
    # Выводим процент
        printf ' %d%%' "$procent"
    ;;
    
#┌─────────────────────────────────────────────────────────────┐
#│ Выводит графическое состояние загрузки (без спец. символов) │
#└─────────────────────────────────────────────────────────────┘
    'progressBarBg')
    # Список аргументов
        local size="$2"    # Общий размер
        local procent="$3" # Сколько уже заполнено в процентах
        
    # Вычисляем сколько уже заполнено
        local fill="$(printf 'scale=3; %d/100*%d' "$procent" "$size" 2> '/dev/null' | bc)"
        
    # Округляем в меньшую сторону
        fill="$(printf '%d' "$fill" 2> '/dev/null')"
        
    # Вычисляем сколько осталось
        local left="$(($size-$fill))"
        
    # Выводим сколько уже заполнено
        printf "\e[47m%${fill}s"
        
    # Выводим сколько осталось
        printf "\e[100m%${left}s"
        
    # Сбрасываем цвет
        printf '\e[0m'
        
    # Выводим процент
        printf ' %d%%' "$procent"
    ;;
    
#┌─────────────────────┐
#│ Высчитывает процент │
#└─────────────────────┘
    'procent')
    # Проверяем корректно-ли указано второе число
        if (( "$(printf '%d' "$3" 2> '/dev/null')" == 0 )); then
        # Возвращаем "0"
            echo '0'
            
        # Выходим с ошибкой
            return 1
        fi
        
    # Процент
        local procent
        
    # Вычисляем сложный процент
        if (( $# == 5 )); then
            procent="$(printf 'scale=3; (%d-1+%d/%d)/%d*100' "$4" "$2" "$3" "$5" 2> '/dev/null' | bc)"
            
    # Вычисляем простой процент
        else
            procent="$(printf 'scale=3; %d/%d*100' "$2" "$3" 2> '/dev/null' | bc)"
        fi
        
    # Округляем до целого
        # echo "$procent" | awk '{printf "%.0f",$0}'
    
    # Округляем в меньшую сторону
        echo "${procent%.*}" | awk '{printf "%.0f",$0}'
        
    # Команда успешно выполнена
        return 0
    ;;
    
#┌───────────────────────────────────────┐
#│ Экранирует все спец. символы в строке │
#└───────────────────────────────────────┘
    'escape')
        printf '%q' "$2" 2> '/dev/null'
    ;;
    
#┌──────────────────────┐
#│ Выводит символ N раз │
#│ Пример: char 3 'abс' │
#│ Результат: abсabсabс │
#└──────────────────────┘
    'char')
        local i
        for ((i = 0; i < "$2"; i++)); do printf '%s' "$3"; done
    ;;
esac
}
