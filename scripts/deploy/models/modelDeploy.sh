#▄─────────────────────▄
#█                     █
#█  Model: Deploy      █
#█  • Деплой (логика)  █
#█                     █
#▀─────────────────────▀
model:Deploy() { case "$1" in
#┌───────────────────────┐
#│ Деплой прошел успешно │
#└───────────────────────┘
    'success')
    # Удаляем информацию о последнем деплое
        remove_file "$PATH_BAD_DEPLOY"
        
    # Обнуляем последний вариант деплоя
        LAST_SELECTION=''
        
    # Обнуляем последнюю контройльную точку
        NO_STOP=''
        
    # Выводим сообщение об успешном завершении
        view:Deploy 'success'
    ;;
    
#┌────────────────────────┐
#│ Деплой не был завершен │
#└────────────────────────┘
    'error')
    # Сохраняем информацию о последнем деплое
        if [ -n "$SELECTION" ]; then
        # Обновляем информацию
            LAST_COMMAND="$RUNNER_COMMAND" # Последняя команда
            LAST_SELECTION="$SELECTION"  # Последний вариант деплоя
            SELECTION=''                 # Обнуляем выбранный вариант деплоя
            
        # Сохраняем информацию в файл
            save_file "$PATH_BAD_DEPLOY" "$NEW_VERSION $LAST_COMMAND $LAST_SELECTION $NO_STOP"
        fi
        
    # Возвращаем старую версию
        save_file "$PATH_VERSION" "$VERSION"
        
    # Выводим сообщение об ошибке
        view:Deploy 'error' "$RUNNER_COMMAND"
        
    # Добавляем задержку для визуального восприятия
        sleep 0.5
    ;;
    
#┌──────────────────────┐
#│ Останавливает деплой │
#└──────────────────────┘
    'stop')
    # Контройльная точка уже пройдена
        if [ -n "$NO_STOP" ]; then
        # Выводим сообщение об ошибке
            view:Deploy 'error' "$NO_STOP"
            
    # Контройльная точка еще не была пройдена
        else
        # Выводим сообщение об успешном завершении
            model:Deploy 'success'
        fi
    ;;
    
#┌───────────────────────────────────┐
#│ Пробует еще раз продолжить деплой │
#└───────────────────────────────────┘
    'continue')
    # Выполняем список команд
        model:Deploy 'run_list' "${CONTINUE_LIST[@]}"
        
    # Проверка прошла успешно
        if [ $? == 0 ]; then
        # Пробуем еще раз продолжить деплой
            model:Deploy 'start' "$LAST_SELECTION" "$NEW_VERSION"
        fi
    ;;
    
#┌───────────────────────────────────┐
#│ Начинает один из вариантов деплоя │
#└───────────────────────────────────┘
    'start')
    # Сохраняем выбранный вариант деплоя
        SELECTION="$2"
        
    # Сохраняем новую версию
        NEW_VERSION="$3"
        
    # Деплоим один из выбранных вариантов
        case "$SELECTION" in
            1) model:Deploy 'run_list' "${ALL_LIST[@]}"    ;; # Сразу в оба репозитория
            2) model:Deploy 'run_list' "${GIT_LIST[@]}"    ;; # Только в git-репозиторий
            3) model:Deploy 'run_list' "${DOCKER_LIST[@]}" ;; # Только в docker-репозиторий
        esac
        
    # Деплой прошел успешно
        if [ $? == 0 ]; then
             model:Deploy 'success'
        fi
    ;;
    
#┌─────────────────────────┐
#│ Выполняет список команд │
#└─────────────────────────┘
    'run_list')
    # Очищаем экран
        reset
        
    # Обновляем заголовок
        view:Deploy 'header'
        
    # Переносим строку
        printf '\n'
        
    # Сохраняем позицию курсора
        printf '\e[s'
        
    # Сохраняем общее количество шагов
        let RUNNER_FULL=$#+1
        
    # Локальные переменные
        local i
        
    # Проходим по списку команд
        for ((i = 2; i <= $#; i++)); do
        # Сохраняем текущую команду
            RUNNER_COMMAND="${!i}"
            
        # Сохраняем текущий шаг
            let RUNNER_NOW=$i-1
            
        # Выполняем команду
            if model:Deploy 'run'; then
            # Команда не была выполнена
                return 1
            fi
        done
        
    # Все команды успешно выполнены
        return 0
    ;;
    
#┌───────────────────┐
#│ Выполняет команду │
#└───────────────────┘
    'run')
    # Проверяем текущую команду
        if [ "$RUNNER_COMMAND" == "$LAST_COMMAND" ]; then
        # Обнуляем последнюю команду и выполняем текущую команду
            LAST_COMMAND=''
            
    # Проверяем последнюю команду
        elif [[ -n "$SELECTION" && -n "$LAST_COMMAND" ]]; then
        # Пропускаем текущую команду
            return 1
        fi
        
    # Сохраняем контройльную точку
        if [ "$RUNNER_COMMAND" == 'no_stop' ]; then
            NO_STOP="$RUNNER_COMMAND"
        fi
        
    # Обновляем текущее состояние команды
        model:Deploy 'state'
        
    # Выполняем команду
        if stream 'runner:Deploy' "$RUNNER_COMMAND"; then
        # Деплой не был завершен
            model:Deploy 'error'
            
         # Команда не была выполнена
            return 0
        fi
        
    # Команда успешно выполнена
        return 1
    ;;
    
#┌─────────────────────────────────────┐
#│ Обновляет текущее состояние команды │
#└─────────────────────────────────────┘
    'state')
    # Восстанавливаем позицию курсора
        printf '\e[u'
        
    # Перемещаем курсор на следующую строку 
        printf '\e[E'
        
    # Перемещаем курсор на предыдущую строку 
        printf '\e[F'
        
    # Обновляем шаг
        printf '[%d/%d] ' "$RUNNER_NOW" "$RUNNER_FULL"
        
    # Сохраняем позицию курсора
        printf '\e[s'
        
    # Обновляем текущее состояние команды
        view:Deploy 'state' "$RUNNER_COMMAND"
        
    # Удаляем все после текущей позиции
        printf '\e[J'
        
    # Переносим строку
        printf '\n'
    ;;
esac
}
