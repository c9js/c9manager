#▄──────────────────────────────────────────▄1.0.3
#█                                          █
#█  Переопределяем сочетание клавиш Ctrl+C  █
#█                                          █
#▀──────────────────────────────────────────▀
ctrl_c() {
    reset # Очистка экрана
    exit # Завершение процесса
}
trap ctrl_c 2

#▄─────────────────────────────────▄
#█                                 █
#█  Переопределяем Reset           █
#█  Пока это единственный способ   █
#█  очистить консоль в режиме Run  █
#█                                 █
#▀─────────────────────────────────▀
reset() {
# Переходим в начало
    printf '\e[1;1H'
    
# Сбрасываем цвет
    printf '\e[0m'
    
# Добавляем пробел
    printf ' '
    
# Удаляем все после текущей позиции
    printf '\e[J'
    
# Удалеяем пробел
    printf '\b'
}

#▄────────▄
#█        █
#█  Base  █
#█        █
#▀────────▀
#┌───────────────────────────────┐
#│ Инструмент для отладки кода   │
#├───────────────────────────────┤
#│ 1. Очищает экран              │
#│ 2. Выводит список сообщений   │
#│ 3. Завершает процесс          │
#├───────────────────────────────┤
#│ Пример: trace "$str1" "$str2" │
#└───────────────────────────────┘
trace() {
# Очищаем экран
    reset
    
# Выводим сообщение на экран
    printf '%s\n' "$@"
    
# Завершаем процесс
    exit
}

#┌──────────────────────────┐
#│ Переводит строку в число │
#└──────────────────────────┘
number() {
    printf '%d' "$1" 2> '/dev/null'
}

#┌────────────────────────────────────────┐
#│ Выводит графическое состояние загрузки │
#└────────────────────────────────────────┘
progressBar() {
# Список аргументов
    local size="$1"    # Общий размер
    local procent="$2" # Сколько уже заполнено в процентах
    
# Вычисляем сколько уже заполнено
    local fill="$(printf 'scale=3; %d/100*%d' "$procent" "$size" 2> '/dev/null' | bc)"
    
# Округляем до целого
    local half="$(echo "$fill" | awk '{printf "%.0f",$0}')"
    
# Округляем в меньшую сторону
    fill="$(printf '%d' "$fill" 2> '/dev/null')"
    
# Вычисляем половину деления
    (( $half > $fill )) && half='▌' || half=' '
    
# Вычисляем сколько осталось
    local left="$(($size-$fill-1))"
    
# Вычисляем сколько уже заполнено
    fill="$(printf "%${fill}s")"
    
# Добавляем цвет фона
    printf '\e[100m'
    
# Выводим сколько уже заполнено
    printf "${fill//[[:space:]]/█}"
    
# Выводим половину деления
    (( $procent != 100 )) && printf "$half"
    
# Выводим сколько осталось
    (( $procent != 100 )) && printf "%${left}s"
    
# Сбрасываем цвет
    printf '\e[0m'
    
# Выводим процент
    printf ' %d%%' "$procent"
}

#┌─────────────────────────────────────────────────────────────┐
#│ Выводит графическое состояние загрузки (без спец. символов) │
#└─────────────────────────────────────────────────────────────┘
progressBarBg() {
# Список аргументов
    local size="$1"    # Общий размер
    local procent="$2" # Сколько уже заполнено в процентах
    
# Вычисляем сколько уже заполнено
    local fill="$(printf 'scale=3; %d/100*%d' "$procent" "$size" 2> '/dev/null' | bc)"
    
# Округляем в меньшую сторону
    fill="$(printf '%d' "$fill" 2> '/dev/null')"
    
# Вычисляем сколько осталось
    local left="$(($size-$fill))"
    
# Выводим сколько уже заполнено
    printf "\e[47m%${fill}s"
    
# Выводим сколько осталось
    printf "\e[100m%${left}s"
    
# Сбрасываем цвет
    printf '\e[0m'
    
# Выводим процент
    printf ' %d%%' "$procent"
}

#┌─────────────────────┐
#│ Высчитывает процент │
#└─────────────────────┘
procent() {
# Проверяем корректно-ли указано второе число
    if (( "$(printf '%d' "$2" 2> '/dev/null')" == 0 )); then
    # Возвращаем "0"
        echo '0'
        
    # Выходим с ошибкой
        return 1
    fi
    
# Процент
    local procent
    
# Вычисляем сложный процент
    if (( $# == 4 )); then
        procent="$(printf 'scale=3; (%d-1+%d/%d)/%d*100' "$3" "$1" "$2" "$4" 2> '/dev/null' | bc)"
        
# Вычисляем простой процент
    else
        procent="$(printf 'scale=3; %d/%d*100' "$1" "$2" 2> '/dev/null' | bc)"
    fi
    
# Округляем до целого
    # echo "$procent" | awk '{printf "%.0f",$0}'

# Округляем в меньшую сторону
    echo "${procent%.*}" | awk '{printf "%.0f",$0}'
    
# Команда выполнена успешно
    return 0
}

#┌───────────────────────────────────────┐
#│ Экранирует все спец. символы в строке │
#└───────────────────────────────────────┘
escape() {
    printf '%q' "$1" 2> '/dev/null'
}

#┌──────────────────────┐
#│ Выводит символ N раз │
#│ Пример: char 3 'abс' │
#│ Результат: abсabсabс │
#└──────────────────────┘
char() {
    local i
    for ((i = 0; i < "$1"; i++)); do printf '%s' "$2"; done
}

#▄─────────────▄
#█             █
#█  Валидация  █
#█             █
#▀─────────────▀
#┌───────────────────────────────────┐
#│ Проверяет верно-ли указана версия │
#│ • Формат XXX.XXX.XXX              │
#└───────────────────────────────────┘
isValidVersion() {
    [[ "$1" =~ ^[0-9]+.[0-9]+.[0-9]+$ ]]
}

#┌─────────────────────────────────────────┐
#│ Проверяет верно-ли указан порт          │
#│ • Диапазон от 1 до 65536 (включительно) │
#└─────────────────────────────────────────┘
isValidPort() {
    [[ ! "$1" =~ ^[0-9]*[0-9]$ ]] && return 1
    (( "$1" > 0 && "$1" < 65537 ))
}

#┌─────────────────────────────────────────────┐
#│ Проверяет верно-ли указано описание коммита │
#│ • Длина от 1 символа (включительно)         │
#└─────────────────────────────────────────────┘
git:isValidMessage() {
    (( ${#1} >= 1 ))
}

#┌────────────────────────────────────────────┐
#│ Проверяет верно-ли указано имя git-юзера   │
#│ • Длина от 2 до 39 символов (включительно) │
#│ • Символы [a-zA-Z0-9] и тире "-"           │
#│ • Тире не допускается в начале и в конце   │
#└────────────────────────────────────────────┘
git:isValidUser() {
    (( ${#1} > 39 )) && return 1
    [[ "$1" =~ ^[a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9]+$ ]]
}

#┌────────────────────────────────────────────────┐
#│ Проверяет верно-ли указано имя git-репозитория │
#│ • Длина от 1 до 100 символов (включительно)    │
#│ • Символы [a-zA-Z0-9], тире "-" и подчерк "_"  │
#└────────────────────────────────────────────────┘
git:isValidRepo() {
    (( ${#1} > 100 )) && return 1
    [[ "$1" =~ ^[a-zA-Z0-9_-]*[a-zA-Z0-9_-]$ ]]
}

#┌───────────────────────────────────────────────────────┐
#│ Проверяет верно-ли указан логин от docker-репозитория │
#│ • Длина от 4 до 30 символов (включительно)            │
#│ • Символы [a-zA-Z0-9]                                 │
#└───────────────────────────────────────────────────────┘
docker:isValidUser() {
    (( ${#1} < 4 )) && return 1
    (( ${#1} > 30 )) && return 1
    [[ "$1" =~ ^[a-zA-Z0-9]*[a-zA-Z0-9]$ ]]
}

#┌────────────────────────────────────────────────────────┐
#│ Проверяет верно-ли указан пароль от docker-репозитория │
#│ • Длина от 9 символов (включительно)                   │
#└────────────────────────────────────────────────────────┘
docker:isValidPass() {
    (( ${#1} > 9 ))
}

#┌────────────────────────────────────────────────────┐
#│ Проверяет верно-ли указано имя проекта             │
#│ • Длина от 2 до 39 символов (включительно)         │
#│ • Символы [a-zA-Z0-9], тире "-" и подчерк "_"      │
#│ • Тире и подчерк не допускается в начале и в конце │
#└────────────────────────────────────────────────────┘
isValidProject() {
# Список аргументов
    local project_name="$1" # Имя проекта
    
# Имя проекта не должно быть
    local blocklist=(
        'apks'  'bin' 'dev' 'etc'  'home' 'lib'
        'media' 'mnt' 'opt' 'proc' 'root' 'run'
        'sbin'  'srv' 'sys' 'tmp'  'usr'  'var'
    )
    
# Локальные переменные
    local block_name
    
# Проходим по списку блокирующих слов
    for block_name in "${blocklist[@]}"; do
        [[ "$project_name" == "$block_name" ]] && return 1
    done
    
# Длина от 1 до 39 символов (включительно)
    (( ${#1} > 39 )) && return 1
    
# Символы [a-zA-Z0-9], тире "-" и подчерк "_"
    [[ "$1" =~ ^[a-zA-Z0-9][a-zA-Z0-9_-]*[a-zA-Z0-9]+$ ]]
}
