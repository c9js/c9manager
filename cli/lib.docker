#▄──────────▄1.0.0
#█          █
#█  Docker  █
#█          █
#▀──────────▀
#┌───────────────────────────────────────────────┐
#│ Проверяет существуют-ли образы, далее         │
#│ присваивает найденые ID переменной $GLOBAL_ID │
#│ is_image "$IMAGE_NAME"                        │
#└───────────────────────────────────────────────┘
is_image() {
# Локальные переменные
    local ids
    local i
    
# Получаем ID образов
    GLOBAL_ID=$(docker images -aq "$1" 2>&1)
    
# Переводим в массив
    ids=($GLOBAL_ID)
    
# Массив пуст
    if [[ ${#ids[*]} == 0 ]]; then
        return 1
    fi
    
# Проходим по списку ID-образов
    for ((i = 0; i < ${#ids[*]}; i++)); do
    # Проверяем длину ID
        if [[ ${#ids[$i]} != '12' ]]; then
            return 1
        fi
    done
    
# Образы существуют
    return 0
}

#┌───────────────────────────────────────────────┐
#│ Проверяет существуют-ли контейнеры, далее     │
#│ присваивает найденые ID переменной $GLOBAL_ID │
#│ is_container "ancestor=$IMAGE_NAME"           │
#│ is_container "name=$IMAGE_NAME"               │
#└───────────────────────────────────────────────┘
is_container() {
# Локальные переменные
    local ids
    local i
    
# Получаем ID контейнеров
    GLOBAL_ID=$(docker ps -aq --filter "$1" 2>&1)
    
# Переводим в массив
    ids=($GLOBAL_ID)
    
# Массив пуст
    if [[ ${#ids[*]} == 0 ]]; then
        return 1
    fi
    
# Проходим по списку ID-контейнеров
    for ((i = 0; i < ${#ids[*]}; i++)); do
    # Проверяем длину ID
        if [[ ${#ids[$i]} != '12' ]]; then
            return 1
        fi
    done
    
# Контейнеры существуют
    return 0
}
