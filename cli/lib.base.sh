#▄──────────────────────────────────────────▄1.0.0
#█                                          █
#█  Путь к каталогу где расположен скрипт,  █
#█  который загрузил эту библиотеку         █
#█                                          █
#▀──────────────────────────────────────────▀
C9_PATH=$(dirname $0)

#▄──────────────────────────────────────────▄
#█                                          █
#█  Переопределяем сочетание клавиш Ctrl+C  █
#█                                          █
#▀──────────────────────────────────────────▀
ctrl_c() {
    reset # Очистка экрана
    exit # Завершение процесса
}
trap ctrl_c 2

#▄─────────────────────────────────▄
#█                                 █
#█  Переопределяем Reset           █
#█  Пока это единственный способ   █
#█  очистить консоль в режиме Run  █
#█                                 █
#▀─────────────────────────────────▀
reset() {
# Переходим в начало
    printf '\e[H';
    
# Добавляем пробел
    printf ' ';
    
# Удаляем все после пробела
    printf '\e[J';
    
# Удалеяем пробел
    printf '\b';
    
# Cброс всех настроек терминала в значения по умолчанию
    printf '\ec';
}

#▄────────▄
#█        █
#█  Base  █
#█        █
#▀────────▀
#┌──────────────────────────┐
#│ Переводит строку в число │
#└──────────────────────────┘
number() {
    printf '%d' "$1" 2> '/dev/null'
}

#┌───────────────────────────────────────┐
#│ Экранирует все спец. символы в строке │
#└───────────────────────────────────────┘
escape() {
    printf '%q' "$1" 2> '/dev/null'
}

#┌──────────────────────┐
#│ Выводит символ N раз │
#│ Пример: char 3 'abс' │
#│ Результат: abсabсabс │
#└──────────────────────┘
char() {
    local i
    for ((i = 0; i < "$1"; i++)); do printf '%s' "$2"; done
}

#▄─────────────▄
#█             █
#█  Валидация  █
#█             █
#▀─────────────▀
#┌───────────────────────────────────┐
#│ Проверяет верно-ли указана версия │
#│ • Формат XXX.XXX.XXX              │
#└───────────────────────────────────┘
isValidVersion() {
    [[ "$1" =~ ^[0-9]+.[0-9]+.[0-9]+$ ]]
}

#┌─────────────────────────────────────────┐
#│ Проверяет верно-ли указан порт          │
#│ • Диапазон от 1 до 65536 (включительно) │
#└─────────────────────────────────────────┘
isValidPort() {
    [[ ! "$1" =~ ^[0-9]*[0-9]$ ]] && return 1
    (( "$1" > 0 && "$1" < 65537 ))
}

#┌────────────────────────────────────────────┐
#│ Проверяет верно-ли указано имя git-юзера   │
#│ • Длина от 2 до 39 символов (включительно) │
#│ • Символы [a-zA-Z0-9] и тире "-"           │
#│ • Тире не допускается в начале и в конце   │
#└────────────────────────────────────────────┘
git:isValidUser() {
    (( ${#1} > 39 )) && return 1
    [[ "$1" =~ ^[a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9]+$ ]]
}

#┌────────────────────────────────────────────────┐
#│ Проверяет верно-ли указано имя git-репозитория │
#│ • Длина от 1 до 100 символов (включительно)    │
#│ • Символы [a-zA-Z0-9], тире "-" и подчерк "_"  │
#└────────────────────────────────────────────────┘
git:isValidRepo() {
    (( ${#1} > 100 )) && return 1
    [[ "$1" =~ ^[a-zA-Z0-9_-]*[a-zA-Z0-9_-]$ ]]
}

#┌───────────────────────────────────────────────────────┐
#│ Проверяет верно-ли указан логин от docker-репозитория │
#│ • Длина от 4 до 30 символов (включительно)            │
#│ • Символы [a-zA-Z0-9]                                 │
#└───────────────────────────────────────────────────────┘
docker:isValidUser() {
    (( ${#1} < 4 )) && return 1
    (( ${#1} > 30 )) && return 1
    [[ "$1" =~ ^[a-zA-Z0-9]*[a-zA-Z0-9]$ ]]
}

#┌────────────────────────────────────────────────────────┐
#│ Проверяет верно-ли указан пароль от docker-репозитория │
#│ • Длина от 9 символов (включительно)                   │
#└────────────────────────────────────────────────────────┘
docker:isValidPass() {
    (( ${#1} > 9 ))
}
