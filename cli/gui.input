#▄─────────▄1.0.0
#█         █
#█  Input  █
#█         █
#▀─────────▀
#┌────────────────────────────────────────────────────────────────────────┐
#│ Просит пользователя ввести данные вручную                              │
#├────────────────────────────────────────────────────────────────────────┤
#│ Пример вызова:                                                         │
#│ input <значение по умолчанию> <функция проверки> <сообщение об ошибке> │
#│ input 'build' 'isValidCommand' "Команда '%s' не найдена!"              │
#└────────────────────────────────────────────────────────────────────────┘
input() {
# Выделяем строку ввода
    printf '\e[44m' # Синий фон
    printf '\e[K' # Удаление всех символов до конца строки
    
# Просим пользователя ввести данные вручную
    read -e -r -p '$ ' -i "$1"
    
# Если данные введены не верно
    if ! $("$2" "$REPLY"); then
        printf '\e[0m' # Сброс цвета
        printf '\r' # Возврат в начало строки
        printf '\e[A' # Переход на одну строку вверх
        printf '\e[K' # Удаление всех символов до конца строки
        
    # Выводим сообщение об ошибке
        printf "Ошибка! $3\n" "$REPLY"
        
    # Просим пользователя ввести данные еще раз
        input "$REPLY" "$2" "$3"
    fi
}

#▄───────────────▄
#█               █
#█  Уведомление  █
#█               █
#▀───────────────▀
#┌──────────────────────┐
#│ Выводит символ N раз │
#│ Пример: char 3 'abс' │
#│ Результат: abсabсabс │
#└──────────────────────┘
char() {
    local i
    for ((i = 0; i < "$1"; i++)); do printf "$2"; done
}

#┌──────────────────────────────┐
#│ Выводит уведомление на экран │
#└──────────────────────────────┘
notice() {
# Локальные переменные
    local length=0
    local msg
    local i
    
# Вычисляем длину
    for ((i = 2; i <= $#; i++)); do
        msg=$(printf '%b' "${!i}")
        if (( $length < ${#msg})); then
            length=${#msg}
        fi
    done
    
# Преобразуем цвет в эскейп последовательность
    case "$1" in
        'Yellow') printf '\e[33m' ;; # Желтый текст
        'Green')  printf '\e[32m' ;; # Зеленый текст
        'Red')    printf '\e[31m' ;; # Красный текст
    esac
    
# Верхняя часть
    printf '▄──%s──▄\n' "$(char $length '─')"
    printf '█  %s  █\n' "$(char $length ' ')"
    
# Сообщение
    for ((i = 2; i <= $#; i++)); do
        msg="${!i}"
        printf '█  %s%s  █\n' "$msg" "$(char $(($length - ${#msg})) ' ')"
    done
    
# Нижняя часть
    printf '█  %s  █\n' "$(char $length ' ')"
    printf '▀──%s──▀\n' "$(char $length '─')"
    
# Сбрасываем цвет
    printf '\e[0m'
}

#┌─────────────────────────────┐
#│ Выводит сообщение об ошибке │
#└─────────────────────────────┘
notice_error() {
# Добавляем красный цвет
    local error_msg='\e[31m'
    
# Проходим по списку ошибок
    for ((i = 1; i < $#; i++)); do
        error_msg="${error_msg}${!i}\n"
    done
    
# Сбрасываем цвет
    error_msg="${error_msg}\e[0m"
    
# Заголовок
    echo "${error_msg}$(notice 'Red' "Ошибка! ${!i}")"
}

#▄──────▄
#█      █
#█  Is  █
#█      █
#▀──────▀
#┌───────────────────────────────────────────────┐
#│ Проверяет существуют-ли образы, далее         │
#│ присваивает найденые ID переменной $GLOBAL_ID │
#│ is_image "$IMAGE_NAME"                        │
#└───────────────────────────────────────────────┘
is_image() {
# Локальные переменные
    local ids
    local i
    
# Получаем ID образов
    GLOBAL_ID=$(docker images -aq "$1" 2>&1)
    
# Переводим в массив
    ids=($GLOBAL_ID)
    
# Массив пуст
    if [[ ${#ids[*]} == 0 ]]; then
        return 1
    fi
    
# Проходим по списку ID-образов
    for ((i = 0; i < ${#ids[*]}; i++)); do
    # Проверяем длину ID
        if [[ ${#ids[$i]} != '12' ]]; then
            return 1
        fi
    done
    
# Образы существуют
    return 0
}

#┌───────────────────────────────────────────────┐
#│ Проверяет существуют-ли контейнеры, далее     │
#│ присваивает найденые ID переменной $GLOBAL_ID │
#│ is_container "ancestor=$IMAGE_NAME"           │
#│ is_container "name=$IMAGE_NAME"               │
#└───────────────────────────────────────────────┘
is_container() {
# Локальные переменные
    local ids
    local i
    
# Получаем ID контейнеров
    GLOBAL_ID=$(docker ps -aq --filter "$1" 2>&1)
    
# Переводим в массив
    ids=($GLOBAL_ID)
    
# Массив пуст
    if [[ ${#ids[*]} == 0 ]]; then
        return 1
    fi
    
# Проходим по списку ID-контейнеров
    for ((i = 0; i < ${#ids[*]}; i++)); do
    # Проверяем длину ID
        if [[ ${#ids[$i]} != '12' ]]; then
            return 1
        fi
    done
    
# Контейнеры существуют
    return 0
}

#▄────────▄
#█        █
#█  Base  █
#█        █
#▀────────▀
#┌──────────────────────────┐
#│ Переводит строку в число │
#└──────────────────────────┘
number() {
    printf '%d' "$1" 2> '/dev/null'
}

#┌───────────────────────────────────────┐
#│ Экранирует все спец. символы в строке │
#└───────────────────────────────────────┘
escape() {
    printf '%q' "$1" 2> '/dev/null'
}
