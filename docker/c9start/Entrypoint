#!/bin/bash
# reset
# exit
#┌──────────────────────┐
#│ Загружаем библиотеку │
#└──────────────────────┘
. ~/cli/lib

#┌───────────────────────────────────────────────┐
#│ Конвертируем:                                 │
#│ Путь Windows -> "D:\MyProjects\project"       │
#│ в путь Linux -> "/d/MyProjects/project"       │
#│ 1. Переводим первый символ в нижний регистр   │
#│ 2. Переводим обратные слешы "\" в "/"         │
#│ 3. Добавляем в начало "/", (если его там нет) │
#│ 4. Удаляем ":"                                │
#└───────────────────────────────────────────────┘
DOCKER_PWD=$(echo "$CD" | sed \
    -e 's/[A-Z]/\L&/' \
    -e 's-\\-\/-g' \
    -e '/^\//!s-^-/-' \
    -e 's-:--' \
)

#┌──────────────────────────┐
#│ Путь к каталогу download │
#└──────────────────────────┘
DOWNLOAD_PATH='/root/download'

#┌─────────────────────┐
#│ Список всех образов │
#└─────────────────────┘
IMAGES=( \
    'c9js/c9docker' \
    'c9js/c9start' \
    'c9js/c9open' \
    'c9docker' \
    'c9start' \
    'c9open' \
)

#┌────────────┐
#│ Имя образа │
#└────────────┘
IMAGE_NAME='c9js/c9docker'

#┌───────────────┐
#│ Версия образа │
#└───────────────┘
IMAGE_VERSION='1.0.33'

#┌─────────────────────┐
#│ Имя текущего образа │
#└─────────────────────┘
IMAGE_CURRENT="c9js/c9start:$IMAGE_VERSION"

#┌─────────────┐
#│ Имя проекта │
#└─────────────┘
PROJECT_NAME='c9manager'

#┌───────────────┐
#│ Имя git-юзера │
#└───────────────┘
GIT_USER='c9js'

#┌───────────────────┐
#│ Порт по умолчанию │
#└───────────────────┘
PORT_DEFAULT='8000'

#┌────────────────────────────┐
#│ Передает внутренний запрос │
#└────────────────────────────┘
request() {
    docker run \
        -v "$DOCKER_PWD:$DOWNLOAD_PATH" \
        --rm -it \
        "$IMAGE_CURRENT" \
        'request' \
        "$1" 2>&1
}

#┌───────────────────────────────────────────────────────────────────┐
#│ Получает список ID-образов                                        │
#│ getImageIDs — Получить список всех ID-образов                     │
#│ getImageIDs "${IMAGES[@]}" — Получить список выбранных ID-образов │
#└───────────────────────────────────────────────────────────────────┘
getImageIDs() {
# Локальные переменные
    local ID
    local i
    
# Создаем список ID-образов
    imageIDs=()
    
# Проходим по списку всех ID-образов
    if (( $# == 0 )); then
    # Получаем ID-образов
        view 'status' \
           1 'Поиск образов...'
           
    # Образы найдены
        if is_image; then
        # Проходим по списку ID-образов
            for ID in $GLOBAL_ID; do
            # Добавляем ID-образа в список
                imageIDs+=("$ID")
            done
        fi
        
# Проходим по списку выбранных ID-образов
    else
        for ((i = 1; i <= $#; i++)); do
        # Получаем ID-образов
            view 'status' \
               1 'Поиск образов' $(($i-1)) $#
               
        # Образы найдены
            if is_image "${!i}"; then
            # Проходим по списку ID-образов
                for ID in $GLOBAL_ID; do
                # Добавляем ID-образа в список
                    imageIDs+=("$ID")
                done
            fi
        done
    fi
}

#┌─────────────────────────────────────────────────────────────────────────────┐
#│ Получает список ID-контейнеров                                              │
#│ getContainerIDs — Получить список всех ID-контейнеров                       │
#│ getContainerIDs "${imageIDs[@]}" — Получить список выбранных ID-контейнеров │
#└─────────────────────────────────────────────────────────────────────────────┘
getContainerIDs() {
# Локальные переменные
    local ID
    local i
    
# Создаем список ID-контейнеров
    containerIDs=()
    
# Проходим по списку всех ID-контейнеров
    if (( $# == 0 )); then
    # Получаем ID-контейнеров
        view 'status' \
           2 'Поиск контейнеров...'
           
    # Контейнеры найдены
        if is_container; then
        # Проходим по списку ID-контейнеров
            for ID in $GLOBAL_ID; do
            # Нельзя останавливать текущий контейнер
                if [[ "$HOSTNAME" != "$ID" ]]; then
                # Добавляем ID-контейнера в список
                    containerIDs+=("$ID")
                fi
            done
        fi
        
# Проходим по списку выбранных ID-контейнеров
    else
        for ((i = 1; i <= $#; i++)); do
        # Получаем ID-контейнеров
            view 'status' \
               2 'Поиск контейнеров' $(($i-1)) $#
               
        # Контейнеры найдены
            if is_container "ancestor=${!i}"; then
            # Проходим по списку ID-контейнеров
                for ID in $GLOBAL_ID; do
                # Нельзя останавливать текущий контейнер
                    if [[ "$HOSTNAME" != "$ID" ]]; then
                    # Добавляем ID-контейнера в список
                        containerIDs+=("$ID")
                    fi
                done
            fi
        done
    fi
}

#▄─────────────────▄
#█                 █
#█  Представление  █
#█                 █
#▀─────────────────▀
view() { case "$1" in
#┌────────────────────┐
#│ Обнуляет заголовок │
#└────────────────────┘
    'header')
        HEADER='Выберите команду:'
    ;;
    
#┌─────────────────────────────┐
#│ Выводит сообщение об ошибке │
#└─────────────────────────────┘
    'error')
    # Удаляем первый параметр
        shift
        
    # Сохраняем сообщение
        HEADER="$(notice_error "$@")Выберите команду:"
    ;;
    
#┌─────────────────────────────┐
#│ Выводит финальное сообщение │
#└─────────────────────────────┘
    'complete')
    # Удаляем первый параметр
        shift
        
    # Сохраняем сообщение
        HEADER="$(notice 'Yellow' "$@")Выберите команду:"
        
    # Обнуляем меню
        menuRestart
    ;;
    
#┌──────────────────────────┐
#│ Обновляет текущий статус │
#└──────────────────────────┘
    'status')
    # Количество шагов
        local full
        
    # Очищаем экран
        reset
        
    # Заголовок
        case "$CONTROLLER" in
            'download')   full=2; printf "Loading 'github.com/%s/%s'" "$GIT_USER" "$PROJECT_NAME";;
            'install')    full=5; printf "Установка '%s:%s'"    "$IMAGE_NAME" "$IMAGE_VERSION";;
            'restart')    full=5; printf "Перезагрузка '%s:%s'" "$IMAGE_NAME" "$IMAGE_VERSION";;
            'start')      full=5; printf "Запуск '%s:%s'"       "$IMAGE_NAME" "$IMAGE_VERSION";;
            'stop')       full=4; printf "Остановка '%s:%s'"    "$IMAGE_NAME" "$IMAGE_VERSION";;
            'stop_all')   full=4; printf 'Остановка всех контейнеров';;
            'remove_all') full=5; printf 'Удаление всех образов';;
        esac
        
    # Статус
        if (( $# <= 3 )); then
            printf '\n[%d/%d] %s\n' "$2" "$full" "$3"
        else
            printf '\n[%d/%d] %s (%d/%d) \n' "$2" "$full" "$3" "$(($4+1))" "$5"
        fi
    ;;
    
#┌─────────────────────────────────────────────┐
#│ Предлагает пользователю скачать репозиторий │
#└─────────────────────────────────────────────┘
    'download')
    # Выводим меню на экран
        menu "$HEADER" 1
        #   Цвет      Строка
            Green "1. Download 'github.com/$GIT_USER/$PROJECT_NAME'"
             Exit '0. Exit'
             
    # Проходим по пунктам меню
        case $? in
            1) controller 'download';; # Выбран пункт: "Download"
            0) controller 'exit';;     # Выбран пункт: "Exit"
        esac
    ;;
    
#┌────────────────────────────────────────────────┐
#│ Предлагает пользователю выбрать пустой каталог │
#└────────────────────────────────────────────────┘
    'dir_error')
    # Выводим сообщение об ошибке
        view 'error' \
        "Каталог '$(printf '%q' "$CD")' должен быть пуст!"
        
    # Выводим меню на экран
        menu "$HEADER" 1
        #   Цвет      Строка
            Green "1. Обновить (download 'github.com/$GIT_USER/$PROJECT_NAME')"
             Exit '0. Exit'
             
    # Проходим по пунктам меню
        case $? in
            1) controller 'download';; # Выбран пункт: "Обновить"
            0) controller 'exit';;     # Выбран пункт: "Exit"
        esac
    ;;
    
#┌──────────────────────────────────────────┐
#│ Предлагает пользователю установить образ │
#└──────────────────────────────────────────┘
    'install')
    # Выводим меню на экран
        menu "$HEADER" 1
        #   Цвет      Строка
            Green "1. Install  Установить '$IMAGE_NAME:$IMAGE_VERSION'"
             Exit '0. Exit'
             
    # Проходим по пунктам меню
        case $? in
            1) view 'choice_port' "$1";; # Выбран пункт: "Install"
            0) controller 'exit';;       # Выбран пункт: "Exit"
        esac
    ;;
    
#┌─────────────────────────────────────────────┐
#│ Предлагает пользователю запустить контейнер │
#└─────────────────────────────────────────────┘
    'start')
    # Выводим меню на экран
        menu "$HEADER" 1
        #   Цвет      Строка
            Green "1. Start      Запустить '$IMAGE_NAME:$IMAGE_VERSION'"
            Green '2. Настройки  Перейти в раздел'
             Exit '0. Exit'
             
    # Проходим по пунктам меню
        case $? in
            1) view 'choice_port' "$1";; # Выбран пункт: "Start"
            2) view 'settings' "$1";;    # Выбран пункт: "Настройки"
            0) controller 'exit';;       # Выбран пункт: "Exit"
        esac
    ;;
    
#┌─────────────────────────────────────────────────┐
#│ Предлагает пользователю перезагрузить контейнер │
#└─────────────────────────────────────────────────┘
    'restart')
    # Выводим меню на экран
        menu "$HEADER" 1
        #   Цвет      Строка
            Green "1. Restart    Перезагрузить '$IMAGE_NAME:$IMAGE_VERSION'"
            Green "2. Stop       Остановить '$IMAGE_NAME:$IMAGE_VERSION'"
            Green '3. Настройки  Перейти в раздел'
             Exit '0. Exit'
             
    # Проходим по пунктам меню
        case $? in
            1) view 'choice_port' "$1";; # Выбран пункт: "Restart"
            2) controller 'stop';;       # Выбран пункт: "Stop"
            3) view 'settings' "$1";;    # Выбран пункт: "Настройки"
            0) controller 'exit';;       # Выбран пункт: "Exit"
        esac
    ;;
    
#┌──────────────────────────────────────┐
#│ Предлагает пользователю выбрать порт │
#└──────────────────────────────────────┘
    'choice_port')
    # Выводим меню на экран
        menu 'Выберите порт:' 1
        #   Цвет      Строка
            Green "1. $PORT_DEFAULT (по умолчанию)"
            Green '2. Редактировать'
             Exit '0. Отмена'
             
    # Проходим по пунктам меню
        case $? in
            1) controller "$2" "$PORT_DEFAULT";; # Выбран пункт: "По умолчанию"
            2) view 'input_port' "$2";;          # Выбран пункт: "Редактировать"
            0) view "$2";;                       # Выбран пункт: "Отмена"
        esac
    ;;
    
#┌──────────────────────────────────────────────┐
#│ Предлагает пользователю указать порт вручную │
#└──────────────────────────────────────────────┘
    'input_port')
    # Очищаем экран
        reset
        
    # Выводим заголовок
        echo 'Введите порт:'
        
    # Предлагаем указать порт
        input "$PORT_DEFAULT" 'isValidPort' "Порт '%s' указан не верно!"
        
    # Пункт выбранный на предыдущем шаге
        controller "$2" "$REPLY"
    ;;
     
#┌───────────┐
#│ Настройки │
#└───────────┘
    'settings')
    # Выводим меню на экран
        menu "$HEADER" 0
        #   Цвет      Строка
            Green '1. SSH-Keygen  Перейти в раздел'
            Green '2. Uninstall   Перейти в раздел'
             Exit '0. Назад'
             
    # Проходим по пунктам меню
        case $? in
            1) view 'ssh-keygen' "$1" "$2";; # Выбран пункт: "SSH-Keygen"
            2) view 'uninstall' "$1" "$2";;  # Выбран пункт: "Uninstall"
            0) view "$2";;                   # Выбран пункт: "Назад"
        esac
    ;;
    
#┌───────────────────────────────────────────────────────┐
#│ Предлагает пользователю настроить соединение с Github │
#└───────────────────────────────────────────────────────┘
    'ssh-keygen')
    # Выводим меню на экран
        menu "$HEADER" 0
        #   Цвет      Строка
            Green '1. SSH-Keygen  Сгенерировать новый ssh-ключ'
            Green '2. List        Список ключей'
             Exit '0. Назад'
             
    # Проходим по пунктам меню
        case $? in
            1) view 'choice_user' "$1" "$2" "$3";; # Выбран пункт: "Сгенерировать"
            2) view 'choice_user' "$1" "$2" "$3";; # Выбран пункт: "List"
            0) view "$2" "$3";;                    # Выбран пункт: "Назад"
        esac
    ;;
    
#┌───────────────────────────────────────────┐
#│ Предлагает пользователю выбрать git-юзера │
#└───────────────────────────────────────────┘
    'choice_user')
    # Выводим меню на экран
        menu 'Выберите git-юзера:' 0
        #   Цвет      Строка
            Green "1. $GIT_USER (по умолчанию)"
            Green '2. Редактировать'
             Exit '0. Отмена'
             
    # Проходим по пунктам меню
        case $? in
            1) controller "$2" "$GIT_USER";; # Выбран пункт: "По умолчанию"
            2) view 'input_user' "$2";;      # Выбран пункт: "Редактировать"
            0) view "$2" "$3" "$4";;         # Выбран пункт: "Отмена"
        esac
    ;;
    
#┌───────────────────────────────────────────┐
#│ Предлагает пользователю указать git-юзера │
#└───────────────────────────────────────────┘
    'input_user')
    # Очищаем экран
        reset
        
    # Выводим заголовок
        echo 'Введите git-юзера:'
        
    # Предлагаем указать порт
        input "$GIT_USER" 'isValidUsername' "Имя '%s' указано не верно!"
        
    # Пункт выбранный на предыдущем шаге
        controller "$2" "$REPLY"
    ;;
    
#┌────────────────────────────────────────────┐
#│ Предлагает пользователю удалить все образы │
#└────────────────────────────────────────────┘
    'uninstall')
    # Выводим меню на экран
        menu "$HEADER" 0
        #   Цвет     Строка
             Red '1. Stop    Остановить все контейнеры'
             Red '2. Remove  Удалить все образы'
            Exit '0. Назад'
            
    # Проходим по пунктам меню
        case $? in
            1) controller 'stop_all';;   # Выбран пункт: "Stop"
            2) controller 'remove_all';; # Выбран пункт: "Remove"
            0) view "$2" "$3";;          # Выбран пункт: "Назад"
        esac
    ;;
esac
}
 
#▄──────────────▄
#█              █
#█  Контроллер  █
#█              █
#▀──────────────▀
controller() { [ -n "$2" ] && CONTROLLER="$2" || CONTROLLER="$1"; case "$1" in
#┌─────────────────────────┐
#│ Команда: Download       │
#│ • Скачивает репозиторий │
#└─────────────────────────┘
    'download')
    # Обнуляем заголовок
        view 'header'
        
    # Обновляем текущий статус
        view 'status' \
           1 'Проверяем каталог...'
           
    # Каталог должен быть пуст
        if [[ "$(request 'is_empty')" == 'empty' ]]; then
        # Обновляем текущий статус
            view 'status' \
               2 'Скачиваем репозиторий...'
               
        # Скачиваем репозиторий
            request 'download' 2>&1
        fi
    ;;
    
#┌─────────────────────────────────────────────────┐
#│ Команда: Stop                                   │
#│ • Останавливает и удаляет все старые контейнеры │
#└─────────────────────────────────────────────────┘
    'stop')
    # Получаем список ID-образов
        getImageIDs "${IMAGES[@]}"
        
    # Получаем список ID-контейнеров
        getContainerIDs "${imageIDs[@]}"
        
    # Останавливаем контейнеры
        for ((i = 0; i < ${#containerIDs[*]}; i++)); do
        # Обновляем текущий статус
            view 'status' \
               3 'Остановка контейнеров' $i ${#containerIDs[*]}
               
        # Останавливаем контейнер
            docker stop "${containerIDs[$i]}" &> '/dev/null'
        done
        
    # Удаляем контейнеры
        for ((i = 0; i < ${#containerIDs[*]}; i++)); do
        # Обновляем текущий статус
            view 'status' \
               4 'Удаление контейнеров' $i ${#containerIDs[*]}
               
        # Удаляем контейнер
            docker rm "${containerIDs[$i]}" &> '/dev/null'
        done
        
    # Выводим финальное сообщение, но только если дальше нет команд
        if [[ "$2" == '' ]]; then
            view 'complete' \
            "Контейнеры '$IMAGE_NAME:$IMAGE_VERSION' были остановлены и удалены!"
        fi
    ;;
    
#┌──────────────────────────────────┐
#│ Команды: Install, Restart, Start │
#│ • Запускает новый контейнер      │
#└──────────────────────────────────┘
    'install' | 'restart' |'start')
    # Останавливаем и удаляем все старые контейнеры
        controller 'stop' "$1"
        
    # Создаем порты
        local PORT1="$2"
        local PORT2=$(($2+1))
        
    # Обновляем текущий статус
        view 'status' \
           5 'Запуск контейнера...'
           
    # Образ не найден
        if ! is_image "$IMAGE_NAME:$IMAGE_VERSION"; then
        # Скачиваем образ
             docker pull "$IMAGE_NAME:$IMAGE_VERSION"
        fi
        
    # Запускаем контейнер
        if ! error_msg=$(docker run \
            --name "$PROJECT_NAME" \
            --hostname "$PROJECT_NAME" \
            -p "$PORT1:$PORT1" \
            -p "$PORT2:$PORT2" \
            -e "C9_PORT=$PORT1" \
            -e "PORT=$PORT2" \
            -e "WORKSPACE=$PROJECT_NAME" \
            -e "GIT_USER=$GIT_USER" \
            -e "DOCKER_PWD=$DOCKER_PWD" \
            -v "$DOCKER_PWD:/$PROJECT_NAME" \
            -v "$DOCKER_PWD/ssh:/root/.sshsource" \
            -v '//var/run/docker.sock:/var/run/docker.sock' --privileged \
            --restart unless-stopped \
            --detach -it \
            "$IMAGE_NAME:$IMAGE_VERSION" 2>&1
        ); then
        # Выводим сообщение об ошибке
            view 'error' \
            "$error_msg" "Что-то не так в 'docker run ...'"
            
        # Завершаем процесс
            return
        fi
        
    # Команда: "Restart"
        if [[ "$1" == 'restart' ]]; then
            view 'complete' \
            "Контейнер '$IMAGE_NAME:$IMAGE_VERSION' успешно перезагружен!" \
            "http://localhost:$PORT1/"
            
    # Команды: "Install", "Start"
        else
            view 'complete' \
            "Контейнер '$IMAGE_NAME:$IMAGE_VERSION' успешно запущен!" \
            "http://localhost:$PORT1/"
        fi
    ;;
    
#┌──────────────────────────────────────────┐
#│ Команда: Stop all                        │
#│ • Останавливает и удаляет все контейнеры │
#└──────────────────────────────────────────┘
    'stop_all')
    # Получаем список всех ID-образов
        getImageIDs
        
    # Получаем список всех ID-контейнеров
        getContainerIDs "${imageIDs[@]}"
        
    # Останавливаем все контейнеры
        for ((i = 0; i < ${#containerIDs[*]}; i++)); do
        # Обновляем текущий статус
            view 'status' \
               3 'Остановка контейнеров' $i ${#containerIDs[*]}
               
        # Останавливаем контейнер
            docker stop "${containerIDs[$i]}" &> '/dev/null'
        done
        
    # Удаляем все контейнеры
        for ((i = 0; i < ${#containerIDs[*]}; i++)); do
        # Обновляем текущий статус
            view 'status' \
               4 'Удаление контейнеров' $i ${#containerIDs[*]}
               
        # Удаляем контейнер
            docker rm "${containerIDs[$i]}" &> '/dev/null'
        done
        
    # Выводим финальное сообщение, но только если дальше нет команд
        if [[ "$2" == '' ]]; then
            view 'complete' \
            'Все контейнеры были остановлены и удалены!'
        fi
    ;;
    
#┌──────────────────────┐
#│ Команда: Remove all  │
#│ • Удаляет все образы │
#└──────────────────────┘
    'remove_all')
    # Останавливаем и удаляем все контейнеры
        controller 'stop_all' "$1"
        
    # Получаем список всех ID-образов
        getImageIDs
        
    # Удаляем все образы
        for ((i = 0; i < ${#imageIDs[*]}; i++)); do
        # Обновляем текущий статус
            view 'status' \
               5 'Удаление образов' $i ${#imageIDs[*]}
               
        # Удаляем образ
            docker rmi "${imageIDs[$i]}" -f &> '/dev/null'
        done
        
    # Выводим финальное сообщение
        view 'complete' \
        'Все контейнеры были остановлены и удалены!' \
        'Образы также были удалены!'
    ;;
    
#┌─────────────────────────────┐
#│ Команда: SSH-Keygen         │
#│ • Генерирует новый ssh-ключ │
#└─────────────────────────────┘
    'ssh-keygen')\
        # ssh-keygen -q -t 'rsa' -N '' -C '' -f /c9manager/x/user
        echo 'ssh-keygen'
        read
    ;;
    
#┌───────────────┐
#│ Команда: Exit │
#└───────────────┘
    'exit')
    # Очищаем экран
        reset
        
    # Выводим финальное сообщение
        echo 'Вам всего доброго, счастья, здоровья и хорошего настроения!'
        
    # Завершаем процесс
        exit
    ;;
esac
}

#┌────────────────────────────────────┐
#│ Проверяем какой запрос был передан │
#└────────────────────────────────────┘
case "$1" in
#┌───────────────────────────┐
#│ Передан внутренний запрос │
#└───────────────────────────┘
    'request') case "$2" in
    # Проверяет пуст-ли каталог
        'is_empty')
            if [[ $(ls -A "$DOWNLOAD_PATH" 2>&1) == '' ]]; then
                printf 'empty' # Каталог пуст
            fi
        ;;
        
    # Проверяет существует-ли каталог
        'is_git')
            if [ ! -d "$DOWNLOAD_PATH/.git" ]; then
                printf 'no_exist' # Каталог не найден
            fi
        ;;
        
    # Скачивает репозиторий
        'download')
        # Переходим в каталог где будет храниться репозиторий
            cd "$DOWNLOAD_PATH"
            
        # Скачиваем репозиторий
            git clone "https://github.com/$GIT_USER/$PROJECT_NAME.git" '.'
            
        # Обновлем URL
            git remote set-url --add 'origin' "git@github.com:$GIT_USER/$PROJECT_NAME.git"
            git remote set-url --delete 'origin' "https://github.com/$GIT_USER/$PROJECT_NAME.git"
        ;;
        
    # Проверяет существует-ли ssh-ключ 
        'is_key')
            echo 'is_key'
        ;;
        
    # Генерирует новый ssh-ключ
        'ssh-keygen')
            echo 'ssh-keygen'
            # ssh-keygen -q -t 'rsa' -N '' -C '' -f "$DOWNLOAD_PATH"/ssh
        ;;
    esac
    ;;
    
#┌──────┐
#│ Меню │
#└──────┘
    *) view 'header'; while :; do
    # Проверяем переменную окружения
        if [[ "$CD" == '' ]]; then
        # Выводим сообщение об ошибке
            echo "Ошибка! Переменная окружения '\$CD' не задана!"
            
        # Завершаем процесс
            exit
        fi
        
    # Каталог пуст
        if [[ "$(request 'is_empty')" == 'empty' ]]; then
        # Выводим меню на экран
            view 'download'
            
    # Каталог не пуст
        else
        # Каталог ".git" не найден
            if [[ "$(request 'is_git')" == 'no_exist' ]]; then
            # Предлагаем пользователю выбрать пустой каталог
                view 'dir_error'
                
        # Каталог ".git" найден
            else
            # Образы не найдены
                if ! is_image "$IMAGE_NAME"; then
                # Выводим меню на экран
                    view 'install'
                    
            # Образы найдены
                else
                # Получаем список ID-контейнеров
                    getContainerIDs $GLOBAL_ID
                    
                # Контейнеры не найдены
                    if (( ${#containerIDs[*]} == 0 )); then
                    # Выводим меню на экран
                        view 'start'
                        
                # Контейнеры найдены
                    else
                    # Выводим меню на экран
                        view 'restart'
                    fi
                fi
            fi
        fi
    done
    ;;
esac
