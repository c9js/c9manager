#▄────────────────────────────────▄
#█                                █
#█  Model: API                    █
#█  • Внутренний запрос (логика)  █
#█                                █
#▀────────────────────────────────▀
model:API() { case "$1" in
#┌───────────────────────────────────┐
#│ Проверяет пуст-ли текущий каталог │
#└───────────────────────────────────┘
    'yes_empty')
        if [[ $(ls -A "$CURRENT_PATH" 2>&1) == '' ]]; then
            printf 'empty' # Каталог пуст
        fi
    ;;
    
#┌────────────────────────────────────────┐
#│ Проверяет существует-ли ".git" каталог │
#└────────────────────────────────────────┘
    'no_git')
        if [ ! -d "$CURRENT_PATH/.git" ]; then
            printf 'no_exist' # Каталог не найден
        fi
    ;;
    
#┌───────────────────────┐
#│ Скачивает репозиторий │
#└───────────────────────┘
    'download')
    # Переходим в каталог где будет храниться репозиторий
        cd "$CURRENT_PATH"
        
    # Скачиваем репозиторий
        git clone "https://$GIT_URL/$GIT_USER/$PROJECT_NAME.git" '.'
        
    # Обновлем URL
        git remote set-url --add 'origin' "git@$GIT_URL:$GIT_USER/$PROJECT_NAME.git"
        git remote set-url --delete 'origin' "https://$GIT_URL/$GIT_USER/$PROJECT_NAME.git"
    ;;
    
#┌──────────────────────────────────┐
#│ Проверяет существует-ли ssh-ключ │
#└──────────────────────────────────┘
    'is_key')
        echo 'is_key'
    ;;
    
#┌───────────────────────────┐
#│ Генерирует новый ssh-ключ │
#└───────────────────────────┘
    'ssh_keygen')
        echo 'ssh_keygen'
        # ssh-keygen -q -t 'rsa' -N '' -C '' -f "$CURRENT_PATH"/ssh
    ;;
esac
}
